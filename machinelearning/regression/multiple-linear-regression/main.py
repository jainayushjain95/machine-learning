print('Step 1 - Importing the libraries')
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd

print('\nStep 2 - Importing the dataset')
dataset = pd.read_csv('50_Startups.csv')
X = dataset.iloc[:, :-1].values
y = dataset.iloc[:, -1].values

print('\nStep 3 - Encoding categorical data')
from sklearn.compose import ColumnTransformer
from sklearn.preprocessing import OneHotEncoder

ct = ColumnTransformer(
    transformers = [
        ('encoder', OneHotEncoder(), [3])
    ],
    remainder = 'passthrough'
)

X = np.array(ct.fit_transform(X))
print(X)

print('\nStep 4 - Splitting the dataset into the Training set and Test set')
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)

print('\nStep 5 - Training the Multiple Linear Regression model on the Training set')
#   We don't need to explicitly care about
#       1. Dummy Variable Trap
#       2. All 5 methods, Backward Elimination, Forward selection etc
#       Scikit classes takes care of it automatically
#       LinearRegression is same for SLR, MLR as it automatically identifies that count(X) > 1
from sklearn.linear_model import LinearRegression
regressor = LinearRegression()
regressor.fit(X_train, y_train)

intercept = regressor.intercept_
print(f"Intercept (b0): {intercept}")

coefficients = regressor.coef_
print(f"Coefficients (b1, b2, ...): {coefficients}")



print('\nStep 6 - Predicting the Test set results')
y_predict = regressor.predict(X_test)
# Set the print options for NumPy arrays to display only 2 decimal places in the output
np.set_printoptions(precision=2)

# Concatenate the predicted values (y_predict) and actual test values (y_test)
# First, reshape both arrays to be 2D column vectors (len(y_predict), 1) and (len(y_test), 1)
# Then, concatenate them along the second axis (axis=1), which means side by side
# Finally, print the concatenated array to show both the predicted and actual values together
# y_predict.reshape(len(y_predict),1)
#   y_predict: This is typically a 1-d NumPy array containing the predicted values generated by the model for the test data.
#       Example: y_predict = [3.4, 5.6, 7.8]
#   len(y_predict): This returns the number of elements in the y_predict array.
#       Here, len(y_predict) would return 3 because there are three predicted values.
#   reshape(len(y_predict), 1): The reshape function is used to change the shape of an array.
#       len(y_predict) represents the number of rows in the new array.
#       1 represents the number of columns. This means you want to reshape the array into a column vector with one value per row.
print(np.concatenate((y_predict.reshape(len(y_predict),1), y_test.reshape(len(y_test),1)),1))
